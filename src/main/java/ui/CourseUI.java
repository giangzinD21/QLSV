package ui;

import dao.CourseDAO;
import model.Course;

import java.util.ArrayList;
import java.util.Scanner;

public class CourseUI {
    private static final Scanner scanner = new Scanner(System.in);
    private static final CourseDAO courseDAO = new CourseDAO();

    public static void showMenu() {
        while (true) {
            System.out.println("\nCh·ªçn ch·ª©c nƒÉng:");
            System.out.println("1. Th√™m m√¥n h·ªçc");
            System.out.println("2. S·ª≠a m√¥n h·ªçc");
            System.out.println("3. X√≥a m√¥n h·ªçc");
            System.out.println("4. Xem t·∫•t c·∫£ m√¥n h·ªçc");
            System.out.println("5. T√¨m m√¥n h·ªçc theo ID");
            System.out.println("6. T√¨m m√¥n h·ªçc theo t√™n ho·∫∑c code");
            System.out.println("7. Tho√°t");

            System.out.print("üëâ Nh·∫≠p l·ª±a ch·ªçn: ");
            String input = scanner.nextLine();
            int choice;

            try {
                choice = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                System.out.println("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë.");
                continue;
            }

            switch (choice) {
                case 1 -> addCourse();
                case 2 -> updateCourse();
                case 3 -> deleteCourse();
                case 4 -> showCourses();
                case 5 -> searchCourseById();
                case 6 -> selectByCondition();
                case 7 -> {
                    System.out.println("üëã Tho√°t ch∆∞∆°ng tr√¨nh.");
                    return;
                }
                default -> System.out.println("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }
    }

    // ======== VALIDATION =========
    private static void validateNotEmpty(String input, String fieldName) {
        if (input == null || input.trim().isEmpty()) {
            throw new IllegalArgumentException("‚ùå " + fieldName + " kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }
    }

    private static void validateCredits(int credits) {
        if (credits < 1) {
            throw new IllegalArgumentException("‚ùå S·ªë t√≠n ch·ªâ ph·∫£i l√† s·ªë nguy√™n l·ªõn h∆°n 0.");
        }
    }

    private static void validateCourseExists(Course course) {
        if (course == null) {
            throw new IllegalArgumentException("‚ùå M√¥n h·ªçc kh√¥ng t·ªìn t·∫°i.");
        }
    }
    // =============================

    private static void addCourse() {
        int courseId;
        String courseCode;
        String courseName;
        int credits;

        while (true) {
            try {
                System.out.print("Nh·∫≠p ID m√¥n h·ªçc: ");
                courseId = Integer.parseInt(scanner.nextLine().trim());
                break;
            } catch (Exception e) {
                System.out.println("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }
        }

        while (true) {
            try {
                System.out.print("Nh·∫≠p m√£ m√¥n h·ªçc: ");
                courseCode = scanner.nextLine().trim();
                validateNotEmpty(courseCode, "M√£ m√¥n h·ªçc");
                break;
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        while (true) {
            try {
                System.out.print("Nh·∫≠p t√™n m√¥n h·ªçc: ");
                courseName = scanner.nextLine().trim();
                validateNotEmpty(courseName, "T√™n m√¥n h·ªçc");
                break;
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        while (true) {
            try {
                System.out.print("Nh·∫≠p s·ªë t√≠n ch·ªâ: ");
                credits = Integer.parseInt(scanner.nextLine().trim());
                validateCredits(credits);
                break;
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        Course course = new Course(courseId, courseCode, courseName, credits);
        courseDAO.add(course);
        System.out.println("‚úÖ M√¥n h·ªçc ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!");
    }

    private static void updateCourse() {
        int courseId;
        while (true) {
            try {
                System.out.print("Nh·∫≠p ID m√¥n h·ªçc c·∫ßn s·ª≠a: ");
                courseId = Integer.parseInt(scanner.nextLine().trim());
                break;
            } catch (Exception e) {
                System.out.println("‚ùå ID kh√¥ng h·ª£p l·ªá.");
            }
        }

        Course course = courseDAO.findById(courseId);
        try {
            validateCourseExists(course);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return;
        }

        System.out.print("Nh·∫≠p m√£ m√¥n h·ªçc m·ªõi (hi·ªán t·∫°i: " + course.getCourseCode() + "): ");
        String code = scanner.nextLine().trim();
        if (!code.isEmpty()) {
            try {
                validateNotEmpty(code, "M√£ m√¥n h·ªçc");
                course.setCourseCode(code);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        System.out.print("Nh·∫≠p t√™n m√¥n h·ªçc m·ªõi (hi·ªán t·∫°i: " + course.getCourseName() + "): ");
        String name = scanner.nextLine().trim();
        if (!name.isEmpty()) {
            try {
                validateNotEmpty(name, "T√™n m√¥n h·ªçc");
                course.setCourseName(name);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        System.out.print("Nh·∫≠p s·ªë t√≠n ch·ªâ m·ªõi (hi·ªán t·∫°i: " + course.getCredits() + "): ");
        String creditsInput = scanner.nextLine().trim();
        if (!creditsInput.isEmpty()) {
            try {
                int credits = Integer.parseInt(creditsInput);
                validateCredits(credits);
                course.setCredits(credits);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }

        courseDAO.update(course);
        System.out.println("‚úÖ M√¥n h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
    }

    private static void deleteCourse() {
        Course course = null;
        while (true) {
            try {
                System.out.print("Nh·∫≠p ID ho·∫∑c t√™n m√¥n h·ªçc c·∫ßn x√≥a: ");
                String input = scanner.nextLine().trim();
                validateNotEmpty(input, "Th√¥ng tin x√≥a");

                if (input.matches("\\d+")) {
                    int courseId = Integer.parseInt(input);
                    course = courseDAO.findById(courseId);
                } else {
                    Course temp = new Course();
                    temp.setCourseName(input);
                    ArrayList<Course> courses = courseDAO.selectByCondition(temp);
                    if (!courses.isEmpty()) {
                        System.out.println("üìã Danh s√°ch m√¥n h·ªçc t√¨m th·∫•y:");
                        for (Course c : courses) {
                            System.out.println(c);
                        }
                        System.out.print("Nh·∫≠p ID m√¥n h·ªçc mu·ªën x√≥a: ");
                        int id = Integer.parseInt(scanner.nextLine().trim());
                        course = courseDAO.findById(id);
                    }
                }

                validateCourseExists(course);
                courseDAO.delete(course);
                System.out.println("‚úÖ M√¥n h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a!");
                return;
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }

    private static void showCourses() {
        ArrayList<Course> courses = courseDAO.selectAll();
        if (courses.isEmpty()) {
            System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ m√¥n h·ªçc n√†o.");
            return;
        }

        System.out.println("üìã Danh s√°ch m√¥n h·ªçc:");
        for (Course course : courses) {
            System.out.println(course);
        }
    }

    private static void searchCourseById() {
        while (true) {
            try {
                System.out.print("Nh·∫≠p ID m√¥n h·ªçc c·∫ßn t√¨m: ");
                int id = Integer.parseInt(scanner.nextLine().trim());

                Course course = new Course();
                course.setCourseId(id);
                Course result = courseDAO.selectById(course);
                validateCourseExists(result);

                System.out.println("üîé Th√¥ng tin m√¥n h·ªçc:");
                System.out.println(result);
                break;

            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }

    private static void selectByCondition() {
        while (true) {
            try {
                System.out.print("Nh·∫≠p t√™n ho·∫∑c m√£ m√¥n h·ªçc c·∫ßn t√¨m: ");
                String keyword = scanner.nextLine().trim();
                validateNotEmpty(keyword, "T·ª´ kh√≥a t√¨m ki·∫øm");

                Course course = new Course();
                course.setCourseName(keyword);
                course.setCourseCode(keyword);

                ArrayList<Course> courses = courseDAO.selectByCondition(course);
                if (courses.isEmpty()) {
                    throw new IllegalArgumentException("‚ùå Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc n√†o!");
                }

                System.out.println("üìã Danh s√°ch m√¥n h·ªçc t√¨m th·∫•y:");
                for (Course c : courses) {
                    System.out.println(c);
                }
                break;

            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }

    public static void main(String[] args) {
        showMenu();
    }
}
